{"ast":null,"code":"// Node imports\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'; // Own imports\n\nimport createRootReducer from './GlobalReducers';\nconst loggerMiddleware = createLogger();\nconst componseEnhancers = composeWithDevTools({\n  name: \"Redux\",\n  realtime: true,\n  trace: true,\n  traceLimit: 25\n}); // History\n\nexport const history = createBrowserHistory(); // Store\n\nlet store; // Configura el store\n\nexport default function configureStore(preloadedState, notify, socketio, notifyNewChats) {\n  const middlewares = [thunkMiddleware.withExtraArgument({\n    history,\n    notify,\n    socketio,\n    notifyNewChats\n  }), routerMiddleware(history)];\n\n  if (process.env === 'development') {\n    middlewares.push(loggerMiddleware);\n  }\n\n  store = createStore(createRootReducer(history), preloadedState, componseEnhancers(applyMiddleware(...middlewares)));\n  return store;\n}\nexport function getStore() {\n  return store;\n}\n;\n/**\n * OPCION 2: para crear el reducer combinado.\n * \n * Crear nuestor propia función, en vez de utilizar el combineReducers de react. De esta forma,\n * podemos pasar partes del estado a cualquiera de los reducers, que de la forma estandar\n * no tendrían acceso a ellas.\n *\n * const reducer = (state = initialState, action) => {\n *     return {\n *         adverts: adverts(state.adverts, action, {session: state.session}),\n *         filters: filters(state.filters, action),\n *         session: session(state.session, action)\n *     }\n * }\n */","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\store\\index.js"],"names":["createStore","applyMiddleware","composeWithDevTools","routerMiddleware","createBrowserHistory","createLogger","thunkMiddleware","createRootReducer","loggerMiddleware","componseEnhancers","name","realtime","trace","traceLimit","history","store","configureStore","preloadedState","notify","socketio","notifyNewChats","middlewares","withExtraArgument","process","env","push","getStore"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,kBAA9B;AAEA,MAAMC,gBAAgB,GAAGH,YAAY,EAArC;AACA,MAAMI,iBAAiB,GAAGP,mBAAmB,CAAC;AAC1CQ,EAAAA,IAAI,SADsC;AAE1CC,EAAAA,QAAQ,EAAE,IAFgC;AAG1CC,EAAAA,KAAK,EAAE,IAHmC;AAI1CC,EAAAA,UAAU,EAAE;AAJ8B,CAAD,CAA7C,C,CAOA;;AACA,OAAO,MAAMC,OAAO,GAAGV,oBAAoB,EAApC,C,CAEP;;AACA,IAAIW,KAAJ,C,CAEA;;AACA,eAAe,SAASC,cAAT,CAAwBC,cAAxB,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0DC,cAA1D,EAA0E;AACrF,QAAMC,WAAW,GAAG,CAAEf,eAAe,CAACgB,iBAAhB,CAAkC;AAACR,IAAAA,OAAD;AAAUI,IAAAA,MAAV;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAAlC,CAAF,EAAkFjB,gBAAgB,CAACW,OAAD,CAAlG,CAApB;;AACA,MAAIS,OAAO,CAACC,GAAR,KAAgB,aAApB,EAAmC;AAC/BH,IAAAA,WAAW,CAACI,IAAZ,CAAiBjB,gBAAjB;AACH;;AACDO,EAAAA,KAAK,GAAGf,WAAW,CACfO,iBAAiB,CAACO,OAAD,CADF,EAEfG,cAFe,EAGfR,iBAAiB,CAACR,eAAe,CAAC,GAAGoB,WAAJ,CAAhB,CAHF,CAAnB;AAKA,SAAON,KAAP;AACH;AAED,OAAO,SAASW,QAAT,GAAmB;AAAE,SAAOX,KAAP;AAAc;AAAA;AAE1C","sourcesContent":["// Node imports\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n// Own imports\nimport createRootReducer from './GlobalReducers';\n\nconst loggerMiddleware = createLogger();\nconst componseEnhancers = composeWithDevTools({\n    name: `Redux`,\n    realtime: true,\n    trace: true,\n    traceLimit: 25\n});\n\n// History\nexport const history = createBrowserHistory()\n\n// Store\nlet store;\n\n// Configura el store\nexport default function configureStore(preloadedState, notify, socketio, notifyNewChats) {\n    const middlewares = [ thunkMiddleware.withExtraArgument({history, notify, socketio, notifyNewChats}), routerMiddleware(history) ];\n    if (process.env === 'development') {\n        middlewares.push(loggerMiddleware);\n    }\n    store = createStore(\n        createRootReducer(history),\n        preloadedState,\n        componseEnhancers(applyMiddleware(...middlewares)),\n    );\n    return store;\n}\n\nexport function getStore(){ return store };\n\n/**\n * OPCION 2: para crear el reducer combinado.\n * \n * Crear nuestor propia función, en vez de utilizar el combineReducers de react. De esta forma,\n * podemos pasar partes del estado a cualquiera de los reducers, que de la forma estandar\n * no tendrían acceso a ellas.\n *\n * const reducer = (state = initialState, action) => {\n *     return {\n *         adverts: adverts(state.adverts, action, {session: state.session}),\n *         filters: filters(state.filters, action),\n *         session: session(state.session, action)\n *     }\n * }\n */"]},"metadata":{},"sourceType":"module"}