{"ast":null,"code":"// Service worker (push notifications)\nimport * as serviceWorker from '../../serviceWorker'; // API\n\nimport AuthServices from '../../services/AuthServices';\nimport UserServices from '../../services/UserServices'; // Own modules\n\nimport LocalStorage from '../../utils/Storage';\nimport { fetchUserChats } from './ChatActions';\nimport { connect, disconnect } from './SocketIoActions'; // Actions\n\nimport * as ACTIONS from '../types/SessionTypes';\n/**\n * Login con usuario y password\n * @param {String} login Login del usuario\n * @param {String} password Password del usuario\n */\n\nexport const login = (login, password) => {\n  return async function (dispatch, getState, extra) {\n    dispatch(loginRequest());\n    return AuthServices.login(login, password).then(response => {\n      dispatch(loginSuccess(response));\n      LocalStorage.saveLocalStorage(getState().session); // connect to chat server\n\n      dispatch(fetchUserChats());\n      dispatch(connect(login)); // register service worker to receive push notifications\n\n      serviceWorker.register(login, extra.notify); // go home\n\n      extra.history.push('/');\n      return response;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(loginFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst loginRequest = () => ({\n  type: ACTIONS.LOGIN_REQUEST\n});\n\nconst loginSuccess = session => ({\n  type: ACTIONS.LOGIN_SUCCESS,\n  session\n});\n\nconst loginFailure = error => ({\n  type: ACTIONS.LOGIN_FAILURE,\n  error\n});\n/**\n * Login con token\n */\n\n\nexport const loginWithToken = jwt => {\n  return async function (dispatch, getState, extra) {\n    dispatch(loginWithTokenRequest());\n    return AuthServices.loginWithToken(jwt).then(response => {\n      // Distpatch login and save in local storage\n      dispatch(loginWithTokenSuccess(response));\n      LocalStorage.saveLocalStorage(getState().session); // connect to chat server\n\n      dispatch(fetchUserChats());\n      dispatch(connect(getState().session.login)); // register service worker to receive push notifications\n\n      serviceWorker.register(getState().session.login, extra.notify); // go home\n\n      extra.history.push('/');\n      return response;\n    }).catch(error => {\n      LocalStorage.cleanLocalStorage();\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(loginWithTokenFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst loginWithTokenRequest = () => ({\n  type: ACTIONS.LOGIN_TOKEN_REQUEST\n});\n\nconst loginWithTokenSuccess = session => ({\n  type: ACTIONS.LOGIN_TOKEN_SUCCESS,\n  session\n});\n\nconst loginWithTokenFailure = error => ({\n  type: ACTIONS.LOGIN_TOKEN_FAILURE,\n  error\n});\n/**\n * Logout\n */\n\n\nexport const logout = () => {\n  return async function (dispatch, getState, extra) {\n    dispatch(logoutRequest());\n    return AuthServices.logout(getState().session.jwt).then(response => {\n      // unregister service worker to receive push notifications\n      serviceWorker.unregister(getState().session.login);\n      dispatch(disconnect(getState().session.login)); // distpatch logout and clear local storage\n\n      dispatch(logoutSuccess());\n      LocalStorage.cleanLocalStorage(); // go login\n\n      extra.history.push('/login');\n      return response;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(logoutFailure(message));\n      LocalStorage.cleanLocalStorage();\n      extra.history.push('/login');\n      throw message;\n    });\n  };\n};\n\nconst logoutRequest = () => ({\n  type: ACTIONS.LOGOUT_REQUEST\n});\n\nconst logoutSuccess = () => ({\n  type: ACTIONS.LOGOUT_SUCCESS\n});\n\nconst logoutFailure = error => ({\n  type: ACTIONS.LOGOUT_FAILURE,\n  error\n});\n/**\n * Activate Account\n */\n\n\nexport const activateAccount = token => {\n  return async function (dispatch, getState, extra) {\n    dispatch(activateAccountRequest());\n    return AuthServices.activate(token).then(result => {\n      LocalStorage.cleanLocalStorage();\n      dispatch(activateAccountSuccess());\n      return result;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(activateAccountFailure(message));\n      ;\n      throw message;\n    });\n  };\n};\n\nconst activateAccountRequest = () => ({\n  type: ACTIONS.ACTIVATE_ACCOUNT_REQUEST\n});\n\nconst activateAccountFailure = error => ({\n  type: ACTIONS.ACTIVATE_ACCOUNT_FAILURE,\n  error\n});\n\nconst activateAccountSuccess = () => ({\n  type: ACTIONS.ACTIVATE_ACCOUNT_SUCCESS\n});\n/**\n * Activate Account\n */\n\n\nexport const createAccount = (login, name, email, password) => {\n  return async function (dispatch, getState, extra) {\n    dispatch(createAccountRequest());\n    return UserServices.create(login, name, email, password).then(user => {\n      LocalStorage.cleanLocalStorage();\n      dispatch(createAccountSuccess());\n      extra.history.push('/login');\n      return user;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(createAccountFailure(message));\n      ;\n      throw message;\n    });\n  };\n};\n\nconst createAccountRequest = () => ({\n  type: ACTIONS.CREATE_ACCOUNT_REQUEST\n});\n\nconst createAccountFailure = error => ({\n  type: ACTIONS.CREATE_ACCOUNT_FAILURE,\n  error\n});\n\nconst createAccountSuccess = () => ({\n  type: ACTIONS.CREATE_ACCOUNT_SUCCESS\n});\n/**\n * Request reseta password\n */\n\n\nexport const requestResetAccount = email => {\n  return async function (dispatch, getState, extra) {\n    dispatch(requestResetAccountRequest());\n    return AuthServices.resetRequest(email).then(user => {\n      dispatch(requestResetAccountSuccess());\n      extra.history.push('/login');\n      return user;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(requestResetAccountFailure(message));\n      ;\n      throw message;\n    });\n  };\n};\n\nconst requestResetAccountRequest = () => ({\n  type: ACTIONS.REQUEST_RESET_ACCOUNT_REQUEST\n});\n\nconst requestResetAccountFailure = error => ({\n  type: ACTIONS.REQUEST_RESET_ACCOUNT_FAILURE,\n  error\n});\n\nconst requestResetAccountSuccess = () => ({\n  type: ACTIONS.REQUEST_RESET_ACCOUNT_SUCCESS\n});\n/**\n * Reset password\n */\n\n\nexport const resetAccount = (token, password) => {\n  return async function (dispatch, getState, extra) {\n    dispatch(resetAccountRequest());\n    return AuthServices.reset(token, password).then(user => {\n      dispatch(resetAccountSuccess());\n      extra.history.push('/login');\n      return user;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(resetAccountFailure(message));\n      ;\n      throw message;\n    });\n  };\n};\n\nconst resetAccountRequest = () => ({\n  type: ACTIONS.RESET_ACCOUNT_REQUEST\n});\n\nconst resetAccountFailure = error => ({\n  type: ACTIONS.RESET_ACCOUNT_FAILURE,\n  error\n});\n\nconst resetAccountSuccess = () => ({\n  type: ACTIONS.RESET_ACCOUNT_SUCCESS\n});\n/**\n * Guardar el anuncio en los favoritos del usuario\n * @param {String} slug Slug del anuncio que queremos guardar como favorito\n * @param {String} jwt Token para autenticar en la API\n */\n\n\nexport const setFavorite = slug => {\n  return async function (dispatch, getState, extra) {\n    dispatch(setFavoriteRequest());\n    return UserServices.setFavorite(slug, getState().session.jwt).then(response => {\n      response.advert.favorite = response.favorite;\n      dispatch(setFavoriteSuccess(response.advert));\n      return response.advert;\n    }).catch(error => {\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(setFavoriteFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst setFavoriteRequest = () => ({\n  type: ACTIONS.SET_FAVORITE_REQUEST\n});\n\nconst setFavoriteFailure = error => ({\n  type: ACTIONS.SET_FAVORITE_FAILURE,\n  error\n});\n\nconst setFavoriteSuccess = advert => ({\n  type: ACTIONS.SET_FAVORITE_SUCCESS,\n  advert\n});\n/**\n * Editar datos de usuario\n * @param {Object} user Objeto con los nuevos datos del usuario\n * @param {String} jwt Token para autenticar en la API\n */\n\n\nexport const editUser = user => {\n  return async function (dispatch, getState, extra) {\n    dispatch(editUserRequest());\n    return UserServices.edit(user, getState().session.jwt).then(response => {\n      dispatch(editUserSuccess(response));\n      extra.history.push('/');\n      return response;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) dispatch(logout());\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(editUserFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst editUserRequest = () => ({\n  type: ACTIONS.EDIT_ACCOUNT_REQUEST\n});\n\nconst editUserFailure = error => ({\n  type: ACTIONS.EDIT_ACCOUNT_FAILURE,\n  error\n});\n\nconst editUserSuccess = user => ({\n  type: ACTIONS.EDIT_ACCOUNT_SUCCESS,\n  user\n});\n/**\n * Elimina una cuenta de usuario\n * @param {String} id Id del usuario a eliminar\n * @param {String} jwt Token para autenticar en la API\n */\n\n\nexport const deleteAccount = id => {\n  return async function (dispatch, getState, extra) {\n    dispatch(deleteAccountRequest());\n    return UserServices.delete(id, getState().session.jwt).then(response => {\n      LocalStorage.cleanLocalStorage();\n      dispatch(logoutSuccess());\n      dispatch(deleteAccountSuccess());\n      return response;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) dispatch(logout());\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(deleteAccountFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst deleteAccountRequest = () => ({\n  type: ACTIONS.DELETE_ACCOUNT_REQUEST\n});\n\nconst deleteAccountFailure = error => ({\n  type: ACTIONS.DELETE_ACCOUNT_FAILURE,\n  error\n});\n\nconst deleteAccountSuccess = () => ({\n  type: ACTIONS.DELETE_ACCOUNT_SUCCESS\n});","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\store\\actions\\SessionActions.js"],"names":["serviceWorker","AuthServices","UserServices","LocalStorage","fetchUserChats","connect","disconnect","ACTIONS","login","password","dispatch","getState","extra","loginRequest","then","response","loginSuccess","saveLocalStorage","session","register","notify","history","push","catch","error","message","data","loginFailure","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","loginWithToken","jwt","loginWithTokenRequest","loginWithTokenSuccess","cleanLocalStorage","loginWithTokenFailure","LOGIN_TOKEN_REQUEST","LOGIN_TOKEN_SUCCESS","LOGIN_TOKEN_FAILURE","logout","logoutRequest","unregister","logoutSuccess","logoutFailure","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","activateAccount","token","activateAccountRequest","activate","result","activateAccountSuccess","activateAccountFailure","ACTIVATE_ACCOUNT_REQUEST","ACTIVATE_ACCOUNT_FAILURE","ACTIVATE_ACCOUNT_SUCCESS","createAccount","name","email","createAccountRequest","create","user","createAccountSuccess","createAccountFailure","CREATE_ACCOUNT_REQUEST","CREATE_ACCOUNT_FAILURE","CREATE_ACCOUNT_SUCCESS","requestResetAccount","requestResetAccountRequest","resetRequest","requestResetAccountSuccess","requestResetAccountFailure","REQUEST_RESET_ACCOUNT_REQUEST","REQUEST_RESET_ACCOUNT_FAILURE","REQUEST_RESET_ACCOUNT_SUCCESS","resetAccount","resetAccountRequest","reset","resetAccountSuccess","resetAccountFailure","RESET_ACCOUNT_REQUEST","RESET_ACCOUNT_FAILURE","RESET_ACCOUNT_SUCCESS","setFavorite","slug","setFavoriteRequest","advert","favorite","setFavoriteSuccess","setFavoriteFailure","SET_FAVORITE_REQUEST","SET_FAVORITE_FAILURE","SET_FAVORITE_SUCCESS","editUser","editUserRequest","edit","editUserSuccess","status","editUserFailure","EDIT_ACCOUNT_REQUEST","EDIT_ACCOUNT_FAILURE","EDIT_ACCOUNT_SUCCESS","deleteAccount","id","deleteAccountRequest","delete","deleteAccountSuccess","deleteAccountFailure","DELETE_ACCOUNT_REQUEST","DELETE_ACCOUNT_FAILURE","DELETE_ACCOUNT_SUCCESS"],"mappings":"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","sourcesContent":["// Service worker (push notifications)\nimport * as serviceWorker from '../../serviceWorker';\n// API\nimport AuthServices from '../../services/AuthServices';\nimport UserServices from '../../services/UserServices';\n// Own modules\nimport LocalStorage from '../../utils/Storage';\nimport { fetchUserChats } from './ChatActions';\nimport { connect, disconnect } from './SocketIoActions';\n// Actions\nimport * as ACTIONS from '../types/SessionTypes';\n\n/**\n * Login con usuario y password\n * @param {String} login Login del usuario\n * @param {String} password Password del usuario\n */\nexport const login = (login, password) => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(loginRequest());\n        return AuthServices.login(login, password)\n        .then(response => {\n            dispatch(loginSuccess(response));\n            LocalStorage.saveLocalStorage(getState().session);\n            // connect to chat server\n            dispatch(fetchUserChats());\n            dispatch(connect(login))\n            // register service worker to receive push notifications\n            serviceWorker.register(login, extra.notify);\n            // go home\n            extra.history.push('/');\n            return response;\n        })\n        .catch (error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(loginFailure(message));\n            throw message;\n        });\n    }\n};\n\nconst loginRequest = () => ({ type: ACTIONS.LOGIN_REQUEST });\nconst loginSuccess = session => ({ type: ACTIONS.LOGIN_SUCCESS, session });\nconst loginFailure = error => ({ type: ACTIONS.LOGIN_FAILURE, error });\n\n/**\n * Login con token\n */\nexport const loginWithToken = (jwt) => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(loginWithTokenRequest());\n        return AuthServices.loginWithToken(jwt)\n        .then(response => {\n            // Distpatch login and save in local storage\n            dispatch(loginWithTokenSuccess(response));\n            LocalStorage.saveLocalStorage(getState().session);\n            // connect to chat server\n            dispatch(fetchUserChats());\n            dispatch(connect(getState().session.login))\n            // register service worker to receive push notifications\n            serviceWorker.register(getState().session.login, extra.notify);\n            // go home\n            extra.history.push('/');\n            return response;\n        })\n        .catch (error => {\n            LocalStorage.cleanLocalStorage();\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(loginWithTokenFailure(message));\n            throw message;\n        });\n    }\n};\n\nconst loginWithTokenRequest = () => ({ type: ACTIONS.LOGIN_TOKEN_REQUEST });\nconst loginWithTokenSuccess = session => ({ type: ACTIONS.LOGIN_TOKEN_SUCCESS, session });\nconst loginWithTokenFailure = error => ({ type: ACTIONS.LOGIN_TOKEN_FAILURE, error });\n\n/**\n * Logout\n */\nexport const logout = () => {\n    return async function(dispatch, getState, extra) {\n        dispatch(logoutRequest());\n        return AuthServices.logout(getState().session.jwt)\n        .then(response => {\n            // unregister service worker to receive push notifications\n            serviceWorker.unregister(getState().session.login);\n            dispatch(disconnect(getState().session.login));\n            // distpatch logout and clear local storage\n            dispatch(logoutSuccess());\n            LocalStorage.cleanLocalStorage();\n            // go login\n            extra.history.push('/login');\n            return response;\n        })\n        .catch (error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(logoutFailure(message));\n            LocalStorage.cleanLocalStorage();\n            extra.history.push('/login');\n            throw message;\n        });\n    }\n};\n\nconst logoutRequest = () => ({ type: ACTIONS.LOGOUT_REQUEST });\nconst logoutSuccess = () => ({ type: ACTIONS.LOGOUT_SUCCESS });\nconst logoutFailure = error => ({ type: ACTIONS.LOGOUT_FAILURE, error });\n\n/**\n * Activate Account\n */\nexport const activateAccount = token => {\n    return async function(dispatch, getState, extra) {\n        dispatch(activateAccountRequest());\n        return AuthServices.activate(token)\n        .then((result) => {\n            LocalStorage.cleanLocalStorage();\n            dispatch(activateAccountSuccess());\n            return result;\n        })\n        .catch((error) => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;            \n            dispatch(activateAccountFailure(message));;\n            throw message;\n        });\n    }\n};\n\nconst activateAccountRequest = () => ({ type: ACTIONS.ACTIVATE_ACCOUNT_REQUEST });\nconst activateAccountFailure = error => ({ type: ACTIONS.ACTIVATE_ACCOUNT_FAILURE, error });\nconst activateAccountSuccess = () => ({ type: ACTIONS.ACTIVATE_ACCOUNT_SUCCESS });\n\n/**\n * Activate Account\n */\nexport const createAccount = (login, name, email, password) => {\n    return async function(dispatch, getState, extra) {\n        dispatch(createAccountRequest());\n        return UserServices.create(login, name, email, password)\n        .then(user => {\n            LocalStorage.cleanLocalStorage();\n            dispatch(createAccountSuccess());\n            extra.history.push('/login');\n            return user;\n        })\n        .catch(error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(createAccountFailure(message));;\n            throw message;\n        });\n    }\n};\n\nconst createAccountRequest = () => ({ type: ACTIONS.CREATE_ACCOUNT_REQUEST });\nconst createAccountFailure = error => ({ type: ACTIONS.CREATE_ACCOUNT_FAILURE, error });\nconst createAccountSuccess = () => ({ type: ACTIONS.CREATE_ACCOUNT_SUCCESS });\n\n/**\n * Request reseta password\n */\nexport const requestResetAccount = email => {\n    return async function(dispatch, getState, extra) {\n        dispatch(requestResetAccountRequest());\n        return AuthServices.resetRequest(email)\n        .then(user => {\n            dispatch(requestResetAccountSuccess());\n            extra.history.push('/login');\n            return user;\n        })\n        .catch(error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(requestResetAccountFailure(message));;\n            throw message;\n        });\n    }\n};\n\nconst requestResetAccountRequest = () => ({ type: ACTIONS.REQUEST_RESET_ACCOUNT_REQUEST });\nconst requestResetAccountFailure = error => ({ type: ACTIONS.REQUEST_RESET_ACCOUNT_FAILURE, error });\nconst requestResetAccountSuccess = () => ({ type: ACTIONS.REQUEST_RESET_ACCOUNT_SUCCESS });\n\n/**\n * Reset password\n */\nexport const resetAccount = (token, password) => {\n    return async function(dispatch, getState, extra) {\n        dispatch(resetAccountRequest());\n        return AuthServices.reset(token, password)\n        .then(user => {\n            dispatch(resetAccountSuccess());\n            extra.history.push('/login');\n            return user;\n        })\n        .catch(error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(resetAccountFailure(message));;\n            throw message;\n        });\n    }\n};\n\nconst resetAccountRequest = () => ({ type: ACTIONS.RESET_ACCOUNT_REQUEST });\nconst resetAccountFailure = error => ({ type: ACTIONS.RESET_ACCOUNT_FAILURE, error });\nconst resetAccountSuccess = () => ({ type: ACTIONS.RESET_ACCOUNT_SUCCESS });\n\n/**\n * Guardar el anuncio en los favoritos del usuario\n * @param {String} slug Slug del anuncio que queremos guardar como favorito\n * @param {String} jwt Token para autenticar en la API\n */\nexport const setFavorite = (slug) => {\n    return async function(dispatch, getState, extra) {\n        dispatch(setFavoriteRequest());\n        return UserServices.setFavorite(slug, getState().session.jwt)\n        .then(response => {\n            response.advert.favorite = response.favorite;\n            dispatch(setFavoriteSuccess(response.advert));\n            return response.advert;\n        })\n        .catch(error => {\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(setFavoriteFailure(message));\n            throw message;\n        });\n    }\n}\n\nconst setFavoriteRequest = () => ({ type: ACTIONS.SET_FAVORITE_REQUEST });\nconst setFavoriteFailure = error => ({ type: ACTIONS.SET_FAVORITE_FAILURE, error });\nconst setFavoriteSuccess = advert => ({ type: ACTIONS.SET_FAVORITE_SUCCESS, advert });\n\n/**\n * Editar datos de usuario\n * @param {Object} user Objeto con los nuevos datos del usuario\n * @param {String} jwt Token para autenticar en la API\n */\nexport const editUser = (user) => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(editUserRequest());\n        return UserServices.edit(user, getState().session.jwt)\n        .then (response => {\n            dispatch(editUserSuccess(response))\n            extra.history.push('/');\n            return response;\n        })\n        .catch(error => {\n            if (error.response && error.response.status === 401) dispatch(logout());\n            let message = error.response && error.response.data ? error.response.data.data : error.message;            \n            dispatch(editUserFailure(message));\n            throw message;\n        })\n    }\n};\n\nconst editUserRequest = () => ({ type: ACTIONS.EDIT_ACCOUNT_REQUEST });\nconst editUserFailure = error => ({ type: ACTIONS.EDIT_ACCOUNT_FAILURE, error });\nconst editUserSuccess = user => ({ type: ACTIONS.EDIT_ACCOUNT_SUCCESS, user });\n\n/**\n * Elimina una cuenta de usuario\n * @param {String} id Id del usuario a eliminar\n * @param {String} jwt Token para autenticar en la API\n */\nexport const deleteAccount = (id) => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(deleteAccountRequest());\n        return UserServices.delete(id, getState().session.jwt)\n        .then (response => {\n            LocalStorage.cleanLocalStorage();\n            dispatch(logoutSuccess());\n            dispatch(deleteAccountSuccess())\n            return response;\n        })\n        .catch(error => {\n            if (error.response && error.response.status === 401) dispatch(logout());\n            let message = error.response && error.response.data ? error.response.data.data : error.message;            \n            dispatch(deleteAccountFailure(message));\n            throw message;\n        })\n    }\n};\n\nconst deleteAccountRequest = () => ({ type: ACTIONS.DELETE_ACCOUNT_REQUEST });\nconst deleteAccountFailure = error => ({ type: ACTIONS.DELETE_ACCOUNT_FAILURE, error });\nconst deleteAccountSuccess = () => ({ type: ACTIONS.DELETE_ACCOUNT_SUCCESS});"]},"metadata":{},"sourceType":"module"}