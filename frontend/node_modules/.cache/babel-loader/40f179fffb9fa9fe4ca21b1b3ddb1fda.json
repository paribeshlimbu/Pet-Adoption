{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\keepcoding-wallaclone-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\keepcoding-wallaclone-master\\\\frontend\\\\src\\\\components\\\\chat\\\\Chat\\\\Chat.js\";\n// Node\nimport React, { useState, useEffect } from 'react';\nimport ScrollableFeed from 'react-scrollable-feed';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport moment from 'moment'; // Material\n\nimport SendIcon from '@material-ui/icons/Send';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport DoneIcon from '@material-ui/icons/Done'; // Own components\n\nimport CardAvatar from '../../cards/CardAvatar'; // Own modules\n\nimport SocketIo from '../../../socketio'; // Models\n\nimport { CHAT_CONSTANTS } from '../../../models/Chat'; // Assets\n// CSS\n\nimport './styles.css'; // Functional component to render a chat conversation\n\nexport default function Chat(props) {\n  // Destructure props\n  const id = props.id,\n        user = props.user,\n        session = props.session,\n        messages = props.messages,\n        online = props.online,\n        name = props.name,\n        t = props.t; // State hook\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInput = _useState2[1]; // Key down event handler\n\n\n  const keyDownEventHandler = ev => {\n    if (ev.which === 13 && !ev.shiftKey && input) {\n      sentMessageEventHandler();\n    }\n  }; // On load confirm peer in case id haven't done it yet\n\n\n  useEffect(() => {\n    const data = {\n      chatId: id,\n      user: user.login\n    };\n    SocketIo.confirmChatRead(data);\n  }, [id, session, user]); // Sent message to chat server\n\n  const sentMessageEventHandler = () => {\n    if (input) {\n      const data = {\n        chatId: id,\n        date: new Date(),\n        senderLogin: session.login,\n        senderId: session._id,\n        receiverLogin: user.login,\n        receiverId: user._id,\n        text: input\n      };\n      SocketIo.sendMessage(data);\n      setInput('');\n    }\n  }; // Calculata if two dates are in the same day of year or not\n\n\n  function diffInDays(start, end) {\n    const startAux = moment(start).clone().startOf('day');\n    const endAux = moment(end).clone().startOf('day');\n    return endAux.diff(startAux, 'days');\n  } // Change date in message list\n\n\n  let a = moment(); // Render\n\n  return React.createElement(\"section\", {\n    className: \"Chat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Chat__User\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(KeyboardBackspaceIcon, {\n    className: \"Chat__ClickBack\",\n    onClick: props.onClickBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(CardAvatar, {\n    avatar: user.avatar,\n    login: user.login,\n    name: user.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"Chat__Status \".concat(online ? 'Chat__Status--online' : ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(FiberManualRecordIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), online ? 'online' : 'offline')), React.createElement(\"div\", {\n    className: \"Chat__Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, name)), React.createElement(ScrollableFeed, {\n    className: \"Chat__Messages\",\n    forceScroll: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, messages.map((message, index) => {\n    const days = diffInDays(a, message.date);\n    a = moment(message.date);\n    return React.createElement(React.Fragment, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, (days > 0 || index === 0) && React.createElement(Moment, {\n      className: \"ChatMessage__ChangeDay\",\n      format: \"dddd, D MMM\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, message.date), React.createElement(\"div\", {\n      className: \"ChatMessage ChatMessage--\".concat(message.user === session._id ? 'mine' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"Text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, message.text, React.createElement(Moment, {\n      className: \"Time\",\n      format: \"LT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, message.date), message.status === CHAT_CONSTANTS.STATUS.WAIT && React.createElement(QueryBuilderIcon, {\n      className: \"Icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), message.status === CHAT_CONSTANTS.STATUS.SENT && React.createElement(DoneIcon, {\n      className: \"Icon Icon__Green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), !message.status && React.createElement(DoneAllIcon, {\n      className: \"Icon Icon__Green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))));\n  })), React.createElement(\"div\", {\n    className: \"Chat__Input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"filter_name\",\n    name: \"name\",\n    type: \"text\",\n    value: input,\n    onChange: ev => setInput(ev.target.value),\n    autoComplete: \"off\",\n    placeholder: t('Write a message...'),\n    onKeyDown: keyDownEventHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(SendIcon, {\n    className: \"Icon\",\n    onClick: sentMessageEventHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })));\n}\nChat.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.object.isRequired,\n  session: PropTypes.object.isRequired,\n  messages: PropTypes.array,\n  online: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  t: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\components\\chat\\Chat\\Chat.js"],"names":["React","useState","useEffect","ScrollableFeed","PropTypes","Moment","moment","SendIcon","FiberManualRecordIcon","KeyboardBackspaceIcon","QueryBuilderIcon","DoneAllIcon","DoneIcon","CardAvatar","SocketIo","CHAT_CONSTANTS","Chat","props","id","user","session","messages","online","name","t","input","setInput","keyDownEventHandler","ev","which","shiftKey","sentMessageEventHandler","data","chatId","login","confirmChatRead","date","Date","senderLogin","senderId","_id","receiverLogin","receiverId","text","sendMessage","diffInDays","start","end","startAux","clone","startOf","endAux","diff","a","onClickBack","avatar","map","message","index","days","status","STATUS","WAIT","SENT","target","value","propTypes","string","isRequired","object","array","bool","func"],"mappings":"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","sourcesContent":["// Node\nimport React, { useState, useEffect } from 'react';\nimport ScrollableFeed from 'react-scrollable-feed'\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport moment from 'moment';\n// Material\nimport SendIcon from '@material-ui/icons/Send';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport DoneIcon from '@material-ui/icons/Done';\n// Own components\nimport CardAvatar from '../../cards/CardAvatar';\n// Own modules\nimport SocketIo from '../../../socketio';\n// Models\nimport { CHAT_CONSTANTS } from '../../../models/Chat';\n// Assets\n// CSS\nimport './styles.css';\n\n\n// Functional component to render a chat conversation\nexport default function Chat(props) {\n\n    // Destructure props\n    const { id, user, session, messages, online, name, t } = props;\n\n    // State hook\n    const [input, setInput] = useState('');\n\n    // Key down event handler\n    const keyDownEventHandler = ev => {\n        if(ev.which === 13 && !ev.shiftKey && input) {\n            sentMessageEventHandler();\n        }\n    }\n\n    // On load confirm peer in case id haven't done it yet\n    useEffect(() => {\n        const data = {\n            chatId: id,\n            user: user.login,\n        }\n        SocketIo.confirmChatRead(data);\n    }, [id, session, user])\n\n    // Sent message to chat server\n    const sentMessageEventHandler = () => {\n        if (input) {\n            const data = {\n                chatId: id,\n                date: new Date(),\n                senderLogin: session.login,\n                senderId: session._id,\n                receiverLogin: user.login,\n                receiverId: user._id,\n                text: input\n            }\n            SocketIo.sendMessage(data)\n            setInput('');\n        } \n    }\n\n    // Calculata if two dates are in the same day of year or not\n    function diffInDays(start, end) {\n        const startAux = moment(start).clone().startOf('day');\n        const endAux = moment(end).clone().startOf('day');\n        return endAux.diff(startAux, 'days');\n     }\n\n    // Change date in message list\n    let a = moment();\n    \n    // Render\n    return (\n        <section className='Chat'>\n            <div className='Chat__User'>\n                <KeyboardBackspaceIcon className='Chat__ClickBack' onClick={props.onClickBack}/>\n                <CardAvatar avatar={user.avatar} login={user.login} name={user.name} />\n                <span className={`Chat__Status ${online?'Chat__Status--online':''}`}><FiberManualRecordIcon/>{online?'online':'offline'}</span>\n            </div>\n            <div className='Chat__Name'>\n                <p>{name}</p>\n            </div>\n            <ScrollableFeed className='Chat__Messages' forceScroll={true}>\n            {   messages.map((message, index) => {\n                    const days = diffInDays(a, message.date);\n                    a = moment(message.date);\n                    return  <React.Fragment key={index}>\n                                { (days > 0 || index === 0) && <Moment className='ChatMessage__ChangeDay' format='dddd, D MMM'>{message.date}</Moment> }\n                                <div className={`ChatMessage ChatMessage--${message.user===session._id?'mine':''}`}>\n                                    <p className='Text'>{message.text}\n                                    <Moment className='Time' format='LT'>{message.date}</Moment>\n                                    { message.status === CHAT_CONSTANTS.STATUS.WAIT && <QueryBuilderIcon className='Icon'/> }\n                                    { message.status === CHAT_CONSTANTS.STATUS.SENT && <DoneIcon className='Icon Icon__Green'/> }\n                                    { !message.status && <DoneAllIcon className='Icon Icon__Green'/> }\n                                    </p>\n                                </div>\n                            </React.Fragment>\n                })\n            }\n            </ScrollableFeed>\n            <div className='Chat__Input'>\n                <input \n                    id='filter_name'\n                    name='name'\n                    type='text' \n                    value={input}\n                    onChange={ev=>setInput(ev.target.value)}\n                    autoComplete='off'\n                    placeholder={t('Write a message...')}\n                    onKeyDown={keyDownEventHandler}\n                />\n                <SendIcon className='Icon' onClick={sentMessageEventHandler}/>\n            </div>\n        </section>\n    )\n}\n\n\nChat.propTypes = {\n    id: PropTypes.string.isRequired,\n    user: PropTypes.object.isRequired,\n    session: PropTypes.object.isRequired,\n    messages: PropTypes.array,\n    online: PropTypes.bool,\n    name: PropTypes.string.isRequired,\n    t: PropTypes.func.isRequired\n}"]},"metadata":{},"sourceType":"module"}