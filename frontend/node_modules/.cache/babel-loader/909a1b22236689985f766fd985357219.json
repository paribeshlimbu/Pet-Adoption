{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\PetAdoption\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Imports\nimport * as CHAT from '../types/ChatTypes';\nimport * as SESSION from '../types/SessionTypes';\nimport * as SOCKET from '../types/SocketIoTypes';\nimport { initialState } from '../InitialState';\nimport { CHAT_CONSTANTS } from '../../models/Chat';\n/**\n * @param {Array} state Chats\n * @param {Object} action Action\n */\n\nexport function chats(state = initialState.chats, action) {\n  switch (action.type) {\n    // Initialization\n    case CHAT.FETCH_USER_CHATS_FAILURE:\n      return initialState.chats;\n    // Fetch\n\n    case CHAT.FETCH_USER_CHATS_SUCCESS:\n      return [...action.chats];\n    // Create\n\n    case CHAT.CREATE_CHAT_SUCCESS:\n      return [...state, action.chat];\n    // Logout\n\n    case SESSION.LOGOUT_SUCCESS:\n    case SESSION.LOGOUT_FAILURE:\n    case SESSION.DELETE_ACCOUNT_SUCCESS:\n      return initialState.chats;\n\n    case SOCKET.SOCKETIO_IN_MESSAGE:\n      {\n        const i = state.findIndex(c => c._id === action.data.chatId);\n\n        if (i >= 0) {\n          const aux = _objectSpread({}, state[i]);\n\n          aux.messages.push({\n            date: action.data.date,\n            text: action.data.text,\n            user: action.data.senderId\n          });\n          return [...state.slice(0, i), aux, ...state.slice(i + 1)];\n        }\n\n        return state;\n      }\n\n    case SOCKET.SOCKETIO_OUT_MESSAGE:\n      {\n        const i = state.findIndex(c => c._id === action.data.chatId);\n\n        if (i >= 0) {\n          const aux = _objectSpread({}, state[i]);\n\n          aux.messages.push({\n            date: action.data.date,\n            text: action.data.text,\n            user: action.data.senderId,\n            status: CHAT_CONSTANTS.STATUS.WAIT\n          });\n          return [...state.slice(0, i), aux, ...state.slice(i + 1)];\n        }\n\n        return state;\n      }\n\n    case SOCKET.SOCKETIO_OUT_MESSAGE_SENT:\n      {\n        const i = state.findIndex(c => c._id === action.data.chatId);\n\n        if (i >= 0) {\n          // Look for the last message to delete de waiting confirmation flag\n          const chat = _objectSpread({}, state[i]);\n\n          for (let j = chat.messages.length - 1; j >= 0; j--) {\n            const message = chat.messages[j];\n\n            if (message.status === CHAT_CONSTANTS.STATUS.WAIT && message.text === action.data.text) {\n              chat.messages[j] = _objectSpread({}, message, {\n                status: CHAT_CONSTANTS.STATUS.SENT\n              });\n            }\n          }\n\n          return [...state.slice(0, i), chat, ...state.slice(i + 1)];\n        }\n\n        return state;\n      }\n\n    case SOCKET.SOCKETIO_OUT_MESSAGES_CONFIRMED:\n      {\n        // Look for the chat received\n        const i = state.findIndex(c => c._id === action.data.chatId);\n\n        if (i >= 0) {\n          // All messages confirmed\n          const chat = _objectSpread({}, state[i]);\n\n          chat.messages = chat.messages.map((m, i) => _objectSpread({}, m, {\n            status: CHAT_CONSTANTS.STATUS.ACK\n          }));\n          return [...state.slice(0, i), chat, ...state.slice(i + 1)];\n        }\n\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\PetAdoption\\frontend\\src\\store\\reducers\\ChatsReducers.js"],"names":["CHAT","SESSION","SOCKET","initialState","CHAT_CONSTANTS","chats","state","action","type","FETCH_USER_CHATS_FAILURE","FETCH_USER_CHATS_SUCCESS","CREATE_CHAT_SUCCESS","chat","LOGOUT_SUCCESS","LOGOUT_FAILURE","DELETE_ACCOUNT_SUCCESS","SOCKETIO_IN_MESSAGE","i","findIndex","c","_id","data","chatId","aux","messages","push","date","text","user","senderId","slice","SOCKETIO_OUT_MESSAGE","status","STATUS","WAIT","SOCKETIO_OUT_MESSAGE_SENT","j","length","message","SENT","SOCKETIO_OUT_MESSAGES_CONFIRMED","map","m","ACK"],"mappings":";;;;;;AAAA;AACA,OAAO,KAAKA,IAAZ,MAAsB,oBAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA;;;;;AAIA,OAAO,SAASC,KAAT,CAAeC,KAAK,GAAGH,YAAY,CAACE,KAApC,EAA2CE,MAA3C,EAAmD;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKR,IAAI,CAACS,wBAAV;AACI,aAAON,YAAY,CAACE,KAApB;AACJ;;AACA,SAAKL,IAAI,CAACU,wBAAV;AACI,aAAO,CAAC,GAAGH,MAAM,CAACF,KAAX,CAAP;AACJ;;AACA,SAAKL,IAAI,CAACW,mBAAV;AACI,aAAO,CAAC,GAAGL,KAAJ,EAAWC,MAAM,CAACK,IAAlB,CAAP;AACJ;;AACA,SAAKX,OAAO,CAACY,cAAb;AACA,SAAKZ,OAAO,CAACa,cAAb;AACA,SAAKb,OAAO,CAACc,sBAAb;AACI,aAAOZ,YAAY,CAACE,KAApB;;AACJ,SAAKH,MAAM,CAACc,mBAAZ;AAAiC;AAC7B,cAAMC,CAAC,GAAGX,KAAK,CAACY,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUb,MAAM,CAACc,IAAP,CAAYC,MAA3C,CAAV;;AACA,YAAIL,CAAC,IAAI,CAAT,EAAY;AACR,gBAAMM,GAAG,qBAAOjB,KAAK,CAACW,CAAD,CAAZ,CAAT;;AACAM,UAAAA,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkB;AACdC,YAAAA,IAAI,EAAEnB,MAAM,CAACc,IAAP,CAAYK,IADJ;AAEdC,YAAAA,IAAI,EAAEpB,MAAM,CAACc,IAAP,CAAYM,IAFJ;AAGdC,YAAAA,IAAI,EAAErB,MAAM,CAACc,IAAP,CAAYQ;AAHJ,WAAlB;AAKA,iBAAO,CAAE,GAAGvB,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeb,CAAf,CAAL,EAAwBM,GAAxB,EAA6B,GAAGjB,KAAK,CAACwB,KAAN,CAAYb,CAAC,GAAG,CAAhB,CAAhC,CAAP;AACH;;AACD,eAAOX,KAAP;AACH;;AACD,SAAKJ,MAAM,CAAC6B,oBAAZ;AAAkC;AAC9B,cAAMd,CAAC,GAAGX,KAAK,CAACY,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUb,MAAM,CAACc,IAAP,CAAYC,MAA3C,CAAV;;AACA,YAAIL,CAAC,IAAI,CAAT,EAAY;AACR,gBAAMM,GAAG,qBAAOjB,KAAK,CAACW,CAAD,CAAZ,CAAT;;AACAM,UAAAA,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkB;AACdC,YAAAA,IAAI,EAAEnB,MAAM,CAACc,IAAP,CAAYK,IADJ;AAEdC,YAAAA,IAAI,EAAEpB,MAAM,CAACc,IAAP,CAAYM,IAFJ;AAGdC,YAAAA,IAAI,EAAErB,MAAM,CAACc,IAAP,CAAYQ,QAHJ;AAIdG,YAAAA,MAAM,EAAE5B,cAAc,CAAC6B,MAAf,CAAsBC;AAJhB,WAAlB;AAMA,iBAAO,CAAE,GAAG5B,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeb,CAAf,CAAL,EAAwBM,GAAxB,EAA6B,GAAGjB,KAAK,CAACwB,KAAN,CAAYb,CAAC,GAAG,CAAhB,CAAhC,CAAP;AACH;;AACD,eAAOX,KAAP;AACH;;AACD,SAAKJ,MAAM,CAACiC,yBAAZ;AAAuC;AACnC,cAAMlB,CAAC,GAAGX,KAAK,CAACY,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUb,MAAM,CAACc,IAAP,CAAYC,MAA3C,CAAV;;AACA,YAAIL,CAAC,IAAI,CAAT,EAAY;AACR;AACA,gBAAML,IAAI,qBAAON,KAAK,CAACW,CAAD,CAAZ,CAAV;;AACA,eAAK,IAAImB,CAAC,GAAGxB,IAAI,CAACY,QAAL,CAAca,MAAd,GAAuB,CAApC,EAAuCD,CAAC,IAAI,CAA5C,EAA+CA,CAAC,EAAhD,EAAoD;AAChD,kBAAME,OAAO,GAAG1B,IAAI,CAACY,QAAL,CAAcY,CAAd,CAAhB;;AACA,gBAAIE,OAAO,CAACN,MAAR,KAAmB5B,cAAc,CAAC6B,MAAf,CAAsBC,IAAzC,IAAiDI,OAAO,CAACX,IAAR,KAAiBpB,MAAM,CAACc,IAAP,CAAYM,IAAlF,EAAwF;AACpFf,cAAAA,IAAI,CAACY,QAAL,CAAcY,CAAd,sBACOE,OADP;AAEIN,gBAAAA,MAAM,EAAE5B,cAAc,CAAC6B,MAAf,CAAsBM;AAFlC;AAIH;AACJ;;AACD,iBAAO,CAAE,GAAGjC,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeb,CAAf,CAAL,EAAwBL,IAAxB,EAA8B,GAAGN,KAAK,CAACwB,KAAN,CAAYb,CAAC,GAAG,CAAhB,CAAjC,CAAP;AACH;;AACD,eAAOX,KAAP;AACH;;AACD,SAAKJ,MAAM,CAACsC,+BAAZ;AAA6C;AACzC;AACA,cAAMvB,CAAC,GAAGX,KAAK,CAACY,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUb,MAAM,CAACc,IAAP,CAAYC,MAA3C,CAAV;;AACA,YAAIL,CAAC,IAAI,CAAT,EAAY;AACR;AACA,gBAAML,IAAI,qBAAON,KAAK,CAACW,CAAD,CAAZ,CAAV;;AACAL,UAAAA,IAAI,CAACY,QAAL,GAAgBZ,IAAI,CAACY,QAAL,CAAciB,GAAd,CAAmB,CAACC,CAAD,EAAIzB,CAAJ,uBAC5ByB,CAD4B;AAE/BV,YAAAA,MAAM,EAAE5B,cAAc,CAAC6B,MAAf,CAAsBU;AAFC,YAAnB,CAAhB;AAIA,iBAAO,CAAE,GAAGrC,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeb,CAAf,CAAL,EAAwBL,IAAxB,EAA8B,GAAGN,KAAK,CAACwB,KAAN,CAAYb,CAAC,GAAG,CAAhB,CAAjC,CAAP;AACH;;AACD,eAAOX,KAAP;AACH;;AACD;AACI,aAAOA,KAAP;AA3ER;AA6EH","sourcesContent":["// Imports\nimport * as CHAT from '../types/ChatTypes';\nimport * as SESSION from '../types/SessionTypes';\nimport * as SOCKET from '../types/SocketIoTypes';\nimport { initialState } from '../InitialState';\nimport { CHAT_CONSTANTS } from '../../models/Chat';\n\n/**\n * @param {Array} state Chats\n * @param {Object} action Action\n */\nexport function chats(state = initialState.chats, action) {\n    switch (action.type) {\n        // Initialization\n        case CHAT.FETCH_USER_CHATS_FAILURE:\n            return initialState.chats;\n        // Fetch\n        case CHAT.FETCH_USER_CHATS_SUCCESS:\n            return [...action.chats];\n        // Create\n        case CHAT.CREATE_CHAT_SUCCESS:\n            return [...state, action.chat];\n        // Logout\n        case SESSION.LOGOUT_SUCCESS:\n        case SESSION.LOGOUT_FAILURE:\n        case SESSION.DELETE_ACCOUNT_SUCCESS:\n            return initialState.chats;\n        case SOCKET.SOCKETIO_IN_MESSAGE: {\n            const i = state.findIndex(c => c._id === action.data.chatId);\n            if (i >= 0) {\n                const aux = {...state[i]};\n                aux.messages.push({\n                    date: action.data.date,\n                    text: action.data.text,\n                    user: action.data.senderId\n                });\n                return [ ...state.slice(0, i), aux, ...state.slice(i + 1) ];\n            }\n            return state;\n        }\n        case SOCKET.SOCKETIO_OUT_MESSAGE: {\n            const i = state.findIndex(c => c._id === action.data.chatId);\n            if (i >= 0) {\n                const aux = {...state[i]};\n                aux.messages.push({\n                    date: action.data.date,\n                    text: action.data.text,\n                    user: action.data.senderId,\n                    status: CHAT_CONSTANTS.STATUS.WAIT\n                });\n                return [ ...state.slice(0, i), aux, ...state.slice(i + 1) ];\n            }\n            return state;\n        }\n        case SOCKET.SOCKETIO_OUT_MESSAGE_SENT: {\n            const i = state.findIndex(c => c._id === action.data.chatId);\n            if (i >= 0) {\n                // Look for the last message to delete de waiting confirmation flag\n                const chat = {...state[i]};\n                for (let j = chat.messages.length - 1; j >= 0; j--) {\n                    const message = chat.messages[j];\n                    if (message.status === CHAT_CONSTANTS.STATUS.WAIT && message.text === action.data.text) {\n                        chat.messages[j] = {\n                            ...message, \n                            status: CHAT_CONSTANTS.STATUS.SENT\n                        };\n                    }\n                }\n                return [ ...state.slice(0, i), chat, ...state.slice(i + 1) ]\n            }\n            return state;\n        }\n        case SOCKET.SOCKETIO_OUT_MESSAGES_CONFIRMED: {\n            // Look for the chat received\n            const i = state.findIndex(c => c._id === action.data.chatId);\n            if (i >= 0) {\n                // All messages confirmed\n                const chat = {...state[i]};\n                chat.messages = chat.messages.map ((m, i) => ({\n                    ...m, \n                    status: CHAT_CONSTANTS.STATUS.ACK\n                }));\n                return [ ...state.slice(0, i), chat, ...state.slice(i + 1) ]\n            }\n            return state;\n        }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}