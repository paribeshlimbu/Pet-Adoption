{"ast":null,"code":"// All information regarding serviceworker lifecycle here:\n// https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle\n// VAPID Key for push notifications\nconst publicVapidKey = 'BCKzHuEXd7u1KviQLVodwYTGgJ6z7iJf-DYtLSNX6FTREky0uxvXCYMwenwp7oXB_3kgEOPGlEO3wYw6XAF2NmY'; // Register service worker\n\nexport const register = (login, callback) => {\n  console.log('SERVICE WORKER INTIALIZATION PROCESS STARTING...'); // 0. Check for service workers capabilities\n\n  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {\n    return console.error('Service workers not available');\n  } // 0. Unregister all in case there is any\n\n\n  console.log('Unregister all previous SERVICE WORKERS...');\n  unregister(login); // 1. register service worker\n\n  console.log('Registering SERVICE WORKER...');\n  registerServiceWorker().then(registration => {\n    // 2. ask user permisson\n    console.log('Asking form PERMISSIONS...');\n    askPermission().then(() => {\n      // 3. Registering push\n      console.log('Registering PUSH...');\n      subscribeUserToPush().then(subscription => {\n        // 4. Push subscription\n        console.log('Sending PUSH subscription...');\n        sendSubscriptionToBackEnd(subscription, login).then(result => {\n          // 5. Ensure service worker is ready\n          navigator.serviceWorker.ready.then(registration => {\n            try {\n              // MY assumption regarding \"ready promise\" resolves when page is controlled by service worker IS WRONG.\n              // https://github.com/w3c/ServiceWorker/issues/799\n              // ERROR: navigator.serviceWorker.ready\n              // SOLUTION: use the custom promise developed by the polymer team (code at the end of this file)\n              window._controlledPromise.then(registration => {\n                // 6. enable communication between service worker and the rest of the app (callback)\n                console.log('Calling the POST MESSAGE...');\n                navigator.serviceWorker.addEventListener('message', event => callback(event.data));\n                navigator.serviceWorker.controller.postMessage('ping');\n                console.log('SERVICE WORKER INTIALIZATION PROCESS FINISHED!');\n              });\n            } catch (error) {\n              console.error(error);\n            }\n          }).catch(error => console.error(error));\n        }).catch(error => console.error(error));\n      }).catch(error => console.error(error));\n    }).catch(error => console.error(error));\n  });\n}; // Unregister\n\nexport const unregister = login => {\n  return navigator.serviceWorker.getRegistrations().then(registrations => {\n    for (let registration of registrations) {\n      fetch(\"\".concat(process.env.REACT_APP_NOTIFY_URL, \"unsubscribe/\").concat(login), {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).catch();\n      registration.unregister();\n    }\n  }).catch(error => console.error(error));\n}; // Register service worker. Returns a promise.\n\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register(\"\".concat(process.env.PUBLIC_URL, \"/custom-service-worker.js\")).then(registration => {\n    console.log('Service worker successfully registered.');\n    return registration;\n  }).catch(error => console.error('Unable to register service worker.', error));\n} // Ask user permisson. Returns a promise.\n\n\nfunction askPermission() {\n  return new Promise((resolve, reject) => {\n    const permissionResult = Notification.requestPermission(function (result) {\n      resolve(result);\n    });\n\n    if (permissionResult) {\n      permissionResult.then(resolve, reject);\n    }\n  }).then(permissionResult => {\n    if (permissionResult !== 'granted') {\n      throw new Error('We weren\\'t granted permission.');\n    }\n  });\n} // Subscribe to Push\n\n\nfunction subscribeUserToPush() {\n  return navigator.serviceWorker.register(\"\".concat(process.env.PUBLIC_URL, \"/custom-service-worker.js\")).then(registration => {\n    const subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n    };\n    return registration.pushManager.subscribe(subscribeOptions);\n  }).then(function (pushSubscription) {\n    return pushSubscription;\n  });\n} // Susbcribe in Backend\n\n\nfunction sendSubscriptionToBackEnd(subscription, login) {\n  return fetch(\"\".concat(process.env.REACT_APP_NOTIFY_URL, \"subscribe/\").concat(login), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(subscription)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Bad status code from server.');\n    }\n\n    return response.json();\n  }).then(responseData => {\n    if (!(responseData.data && responseData.data.success)) {\n      throw new Error('Bad response from server.');\n    }\n  });\n} // Convert vapid key to urlBase64 format\n\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n// Provides an equivalent to navigator.serviceWorker.ready that waits for the\n// page to be controlled, as opposed to waiting for the active service worker.\n// See https://github.com/slightlyoff/ServiceWorker/issues/799\n\n\nwindow._controlledPromise = new Promise(function (resolve) {\n  // Resolve with the registration, to match the .ready promise's behavior.\n  var resolveWithRegistration = function () {\n    navigator.serviceWorker.getRegistration().then(function (registration) {\n      resolve(registration);\n    });\n  };\n\n  try {\n    if (navigator.serviceWorker.controller) {\n      resolveWithRegistration();\n    } else {\n      navigator.serviceWorker.addEventListener('controllerchange', resolveWithRegistration);\n    }\n  } catch (error) {}\n});","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\PetAdoption\\frontend\\src\\serviceWorker.js"],"names":["publicVapidKey","register","login","callback","console","log","navigator","window","error","unregister","registerServiceWorker","then","registration","askPermission","subscribeUserToPush","subscription","sendSubscriptionToBackEnd","result","serviceWorker","ready","_controlledPromise","addEventListener","event","data","controller","postMessage","catch","getRegistrations","registrations","fetch","process","env","REACT_APP_NOTIFY_URL","method","headers","PUBLIC_URL","Promise","resolve","reject","permissionResult","Notification","requestPermission","Error","subscribeOptions","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","pushManager","subscribe","pushSubscription","body","JSON","stringify","response","ok","json","responseData","success","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","resolveWithRegistration","getRegistration"],"mappings":"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","sourcesContent":["// All information regarding serviceworker lifecycle here:\n// https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle\n\n// VAPID Key for push notifications\nconst publicVapidKey = 'BCKzHuEXd7u1KviQLVodwYTGgJ6z7iJf-DYtLSNX6FTREky0uxvXCYMwenwp7oXB_3kgEOPGlEO3wYw6XAF2NmY';\n\n// Register service worker\nexport const register = (login, callback) =>  {\n\n    console.log('SERVICE WORKER INTIALIZATION PROCESS STARTING...')\n\n    // 0. Check for service workers capabilities\n    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {\n        return console.error('Service workers not available');\n    }\n    \n    // 0. Unregister all in case there is any\n    console.log('Unregister all previous SERVICE WORKERS...');\n    unregister(login);\n    \n    // 1. register service worker\n    console.log('Registering SERVICE WORKER...');\n    registerServiceWorker()\n    .then(registration => {\n        // 2. ask user permisson\n        console.log('Asking form PERMISSIONS...');\n        askPermission()\n        .then (() => {\n            // 3. Registering push\n            console.log('Registering PUSH...');\n            subscribeUserToPush()\n            .then (subscription => {\n                // 4. Push subscription\n                console.log('Sending PUSH subscription...');\n                sendSubscriptionToBackEnd(subscription, login)\n                .then (result => {\n                    // 5. Ensure service worker is ready\n                    navigator.serviceWorker.ready\n                    .then(registration => {\n                        try {\n                            // MY assumption regarding \"ready promise\" resolves when page is controlled by service worker IS WRONG.\n                            // https://github.com/w3c/ServiceWorker/issues/799\n                            // ERROR: navigator.serviceWorker.ready\n                            // SOLUTION: use the custom promise developed by the polymer team (code at the end of this file)\n                            window._controlledPromise\n                            .then(registration => {\n                                // 6. enable communication between service worker and the rest of the app (callback)\n                                console.log('Calling the POST MESSAGE...');\n                                navigator.serviceWorker.addEventListener('message', event => callback(event.data));\n                                navigator.serviceWorker.controller.postMessage('ping');\n                                console.log('SERVICE WORKER INTIALIZATION PROCESS FINISHED!');\n                            })    \n                        } catch (error) {\n                            console.error(error)\n                        }\n                    })\n                    .catch(error => console.error(error));\n                })\n                .catch(error => console.error(error));\n            })\n            .catch (error => console.error (error));\n        })\n        .catch(error => console.error(error));\n    });\n}\n\n// Unregister\nexport const unregister = login =>  {\n    return navigator.serviceWorker.getRegistrations()\n    .then(registrations => {\n        for(let registration of registrations) {\n            fetch(`${process.env.REACT_APP_NOTIFY_URL}unsubscribe/${login}`, { \n                method: 'POST',\n                headers: { 'content-type': 'application/json' }\n            })\n            .catch();\n            registration.unregister()\n        } \n    })\n    .catch(error => console.error(error));\n}\n\n// Register service worker. Returns a promise.\nfunction registerServiceWorker() {\n    return navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/custom-service-worker.js`)\n    .then(registration => {\n        console.log('Service worker successfully registered.');\n        return registration;\n    })\n    .catch(error => console.error('Unable to register service worker.', error));\n}\n\n// Ask user permisson. Returns a promise.\nfunction askPermission() {\n    return new Promise((resolve, reject) => {\n        const permissionResult = Notification.requestPermission(function(result) {\n            resolve(result);\n        });\n        if (permissionResult) {\n            permissionResult.then(resolve, reject);\n        }\n    })\n    .then(permissionResult => {\n        if (permissionResult !== 'granted') {\n            throw new Error('We weren\\'t granted permission.');\n        }\n    });\n}\n\n// Subscribe to Push\nfunction subscribeUserToPush() {\n    return navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/custom-service-worker.js`)\n    .then(registration => {\n        const subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n        };\n        return registration.pushManager.subscribe(subscribeOptions);\n    })\n    .then(function(pushSubscription) {\n        return pushSubscription;\n    });\n}\n\n// Susbcribe in Backend\nfunction sendSubscriptionToBackEnd(subscription, login) {\n    return fetch(`${process.env.REACT_APP_NOTIFY_URL}subscribe/${login}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(subscription)\n    })\n    .then(response => {\n        if (!response.ok) { throw new Error('Bad status code from server.'); }\n        return response.json();\n    })\n    .then(responseData => {\n        if (!(responseData.data && responseData.data.success)) {\n            throw new Error('Bad response from server.');\n        }\n    });\n}   \n\n// Convert vapid key to urlBase64 format\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n    \n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    \n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n// Provides an equivalent to navigator.serviceWorker.ready that waits for the\n// page to be controlled, as opposed to waiting for the active service worker.\n// See https://github.com/slightlyoff/ServiceWorker/issues/799\nwindow._controlledPromise = new Promise(function(resolve) {\n    // Resolve with the registration, to match the .ready promise's behavior.\n    var resolveWithRegistration = function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n            resolve(registration);\n        });\n    };\n    \n    try {\n        if (navigator.serviceWorker.controller) {\n            resolveWithRegistration();\n        } else {\n            navigator.serviceWorker.addEventListener('controllerchange', resolveWithRegistration);\n        }            \n    } catch (error) {\n    }\n});"]},"metadata":{},"sourceType":"module"}