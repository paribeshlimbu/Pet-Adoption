{"ast":null,"code":"// Utils\n// API\nimport ChatServices from '../../services/ChatServices'; // Actions\n\nimport * as ACTIONS from '../types/ChatTypes';\nimport { logout } from './SessionActions';\n/**\n * Obtener todos los chats abiertos del usuario\n */\n\nexport const fetchUserChats = () => {\n  return async function (dispatch, getState, extra) {\n    dispatch(fetchUserChatsRequest());\n    return ChatServices.getChats(getState().session.jwt).then(chats => {\n      dispatch(fetchUserChatsSuccess(chats));\n      return chats;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) dispatch(logout());\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(fetchUserChatsFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst fetchUserChatsRequest = () => ({\n  type: ACTIONS.FETCH_USER_CHATS_REQUEST\n});\n\nconst fetchUserChatsFailure = error => ({\n  type: ACTIONS.FETCH_USER_CHATS_FAILURE,\n  error\n});\n\nconst fetchUserChatsSuccess = chats => ({\n  type: ACTIONS.FETCH_USER_CHATS_SUCCESS,\n  chats\n});\n/**\n * Obtener todo la conversación asociada a un chat\n */\n\n\nexport const fetchChat = id => {\n  return async function (dispatch, getState, extra) {\n    dispatch(fetchChatRequest());\n    return ChatServices.getChat(id, getState().session.jwt).then(chat => {\n      dispatch(fetchChatSuccess(chat));\n      return chat;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) dispatch(logout());\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(fetchChatFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst fetchChatRequest = () => ({\n  type: ACTIONS.FETCH_CHAT_REQUEST\n});\n\nconst fetchChatFailure = error => ({\n  type: ACTIONS.FETCH_CHAT_FAILURE,\n  error\n});\n\nconst fetchChatSuccess = chat => ({\n  type: ACTIONS.FETCH_CHAT_SUCCESS,\n  chat\n});\n/**\n * Crea una nueva conversacion\n */\n\n\nexport const createChat = slug => {\n  return async function (dispatch, getState, extra) {\n    dispatch(createChatRequest());\n    return ChatServices.postChat(slug, getState().session.jwt).then(chat => {\n      dispatch(createChatSuccess(chat));\n      extra.history.push(\"/chats/\".concat(chat._id));\n      return chat;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) dispatch(logout());\n      let message = error.response && error.response.data ? error.response.data.data : error.message;\n      dispatch(createChatFailure(message));\n      throw message;\n    });\n  };\n};\n\nconst createChatRequest = () => ({\n  type: ACTIONS.CREATE_CHAT_REQUEST\n});\n\nconst createChatFailure = error => ({\n  type: ACTIONS.CREATE_CHAT_FAILURE,\n  error\n});\n\nconst createChatSuccess = chat => ({\n  type: ACTIONS.CREATE_CHAT_SUCCESS,\n  chat\n});","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\store\\actions\\ChatActions.js"],"names":["ChatServices","ACTIONS","logout","fetchUserChats","dispatch","getState","extra","fetchUserChatsRequest","getChats","session","jwt","then","chats","fetchUserChatsSuccess","catch","error","response","status","message","data","fetchUserChatsFailure","type","FETCH_USER_CHATS_REQUEST","FETCH_USER_CHATS_FAILURE","FETCH_USER_CHATS_SUCCESS","fetchChat","id","fetchChatRequest","getChat","chat","fetchChatSuccess","fetchChatFailure","FETCH_CHAT_REQUEST","FETCH_CHAT_FAILURE","FETCH_CHAT_SUCCESS","createChat","slug","createChatRequest","postChat","createChatSuccess","history","push","_id","createChatFailure","CREATE_CHAT_REQUEST","CREATE_CHAT_FAILURE","CREATE_CHAT_SUCCESS"],"mappings":"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","sourcesContent":["// Utils\n// API\nimport ChatServices from '../../services/ChatServices';\n// Actions\nimport * as ACTIONS from '../types/ChatTypes';\nimport { logout } from './SessionActions';\n\n\n/**\n * Obtener todos los chats abiertos del usuario\n */\nexport const fetchUserChats = () => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(fetchUserChatsRequest());\n        return ChatServices.getChats(getState().session.jwt)\n        .then(chats => {\n            dispatch(fetchUserChatsSuccess(chats));\n            return chats;\n        })\n        .catch (error => {\n            if (error.response && error.response.status === 401) dispatch(logout());\n            let message = error.response && error.response.data ? error.response.data.data : error.message;            \n            dispatch(fetchUserChatsFailure(message));\n            throw message;\n        });\n    }\n};\n\nconst fetchUserChatsRequest = () => ({ type: ACTIONS.FETCH_USER_CHATS_REQUEST });\nconst fetchUserChatsFailure = error => ({ type: ACTIONS.FETCH_USER_CHATS_FAILURE, error });\nconst fetchUserChatsSuccess = chats => ({ type: ACTIONS.FETCH_USER_CHATS_SUCCESS, chats });\n\n/**\n * Obtener todo la conversación asociada a un chat\n */\nexport const fetchChat = id => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(fetchChatRequest());\n        return ChatServices.getChat(id, getState().session.jwt)\n        .then(chat => {\n            dispatch(fetchChatSuccess(chat));\n            return chat;\n        })\n        .catch (error => {\n            if (error.response && error.response.status === 401) dispatch(logout());\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(fetchChatFailure(message));\n            throw message;\n        });\n    }\n};\n\nconst fetchChatRequest = () => ({ type: ACTIONS.FETCH_CHAT_REQUEST });\nconst fetchChatFailure = error => ({ type: ACTIONS.FETCH_CHAT_FAILURE, error });\nconst fetchChatSuccess = chat => ({ type: ACTIONS.FETCH_CHAT_SUCCESS, chat });\n\n/**\n * Crea una nueva conversacion\n */\nexport const createChat = slug => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(createChatRequest());\n        return ChatServices.postChat(slug, getState().session.jwt)\n        .then(chat => {\n            dispatch(createChatSuccess(chat));\n            extra.history.push(`/chats/${chat._id}`);\n            return chat;\n        })\n        .catch (error => {\n            if (error.response && error.response.status === 401) dispatch(logout());\n            let message = error.response && error.response.data ? error.response.data.data : error.message;\n            dispatch(createChatFailure(message));\n            throw message;\n        });\n    }\n};\n\nconst createChatRequest = () => ({ type: ACTIONS.CREATE_CHAT_REQUEST });\nconst createChatFailure = error => ({ type: ACTIONS.CREATE_CHAT_FAILURE, error });\nconst createChatSuccess = chat => ({ type: ACTIONS.CREATE_CHAT_SUCCESS, chat });"]},"metadata":{},"sourceType":"module"}