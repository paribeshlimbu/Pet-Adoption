{"ast":null,"code":"// Own modules\nimport SocketIo from '../../socketio'; // Actions\n\nimport * as ACTIONS from '../types/SocketIoTypes';\nexport const connect = login => {\n  SocketIo.connect(login);\n  return {\n    type: ACTIONS.SOCKETIO_CONNECT,\n    login\n  };\n};\nexport const disconnect = login => {\n  SocketIo.disconnect(login);\n  return {\n    type: ACTIONS.SOCKETIO_DISCONNECT,\n    login\n  };\n};\nexport const connectedUser = () => ({\n  type: ACTIONS.SOCKETIO_CONNECTED_USER\n});\nexport const disconnectedUser = () => ({\n  type: ACTIONS.SOCKETIO_DISCONNECTED_USER\n});\nexport const allOnlineUsers = onlineUsers => ({\n  type: ACTIONS.SOCKETIO_ALL_ONLINE_USERS,\n  onlineUsers\n});\nexport const onlineUser = login => ({\n  type: ACTIONS.SOCKETIO_ONLINE_USER,\n  login\n});\nexport const offlineUser = login => ({\n  type: ACTIONS.SOCKETIO_OFFLINE_USER,\n  login\n});\nexport const inMessage = data => {\n  return async function (dispatch, getState, extra) {\n    dispatch(inMessageSuccess(data)); // If user is in chats section\n\n    if (window.location.pathname.startsWith('/chats')) {\n      if (window.location.pathname === \"/chats/\".concat(data.chatId)) {\n        SocketIo.confirmChatRead({\n          chatId: data.chatId,\n          user: data.senderLogin\n        });\n      } else {\n        const chat = getState().chats[0];\n\n        if (chat._id === data.chatId) {\n          SocketIo.confirmChatRead({\n            chatId: data.chatId,\n            user: data.senderLogin\n          });\n        } else {\n          extra.notifyNewChats(data.senderLogin);\n        }\n      }\n    } else {\n      extra.notifyNewChats(data.senderLogin);\n    }\n  };\n};\n\nconst inMessageSuccess = data => ({\n  type: ACTIONS.SOCKETIO_IN_MESSAGE,\n  data\n});\n\nexport const outMessage = data => ({\n  type: ACTIONS.SOCKETIO_OUT_MESSAGE,\n  data\n});\nexport const outMessageSent = data => ({\n  type: ACTIONS.SOCKETIO_OUT_MESSAGE_SENT,\n  data\n});\nexport const outMessagesConfirmed = data => ({\n  type: ACTIONS.SOCKETIO_OUT_MESSAGES_CONFIRMED,\n  data\n});","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\store\\actions\\SocketIoActions.js"],"names":["SocketIo","ACTIONS","connect","login","type","SOCKETIO_CONNECT","disconnect","SOCKETIO_DISCONNECT","connectedUser","SOCKETIO_CONNECTED_USER","disconnectedUser","SOCKETIO_DISCONNECTED_USER","allOnlineUsers","onlineUsers","SOCKETIO_ALL_ONLINE_USERS","onlineUser","SOCKETIO_ONLINE_USER","offlineUser","SOCKETIO_OFFLINE_USER","inMessage","data","dispatch","getState","extra","inMessageSuccess","window","location","pathname","startsWith","chatId","confirmChatRead","user","senderLogin","chat","chats","_id","notifyNewChats","SOCKETIO_IN_MESSAGE","outMessage","SOCKETIO_OUT_MESSAGE","outMessageSent","SOCKETIO_OUT_MESSAGE_SENT","outMessagesConfirmed","SOCKETIO_OUT_MESSAGES_CONFIRMED"],"mappings":"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","sourcesContent":["// Own modules\nimport SocketIo from '../../socketio';\n// Actions\nimport * as ACTIONS from '../types/SocketIoTypes';\n\nexport const connect = login => {\n    SocketIo.connect(login);\n    return { type: ACTIONS.SOCKETIO_CONNECT, login };\n};\n\nexport const disconnect = login => {\n    SocketIo.disconnect(login);\n    return  { type: ACTIONS.SOCKETIO_DISCONNECT, login };\n}\n\nexport const connectedUser = () => ({ type: ACTIONS.SOCKETIO_CONNECTED_USER });\nexport const disconnectedUser = () => ({ type: ACTIONS.SOCKETIO_DISCONNECTED_USER });\nexport const allOnlineUsers = onlineUsers => ({ type: ACTIONS.SOCKETIO_ALL_ONLINE_USERS, onlineUsers });\nexport const onlineUser = login => ({ type: ACTIONS.SOCKETIO_ONLINE_USER, login });\nexport const offlineUser = login => ({ type: ACTIONS.SOCKETIO_OFFLINE_USER, login });\n\nexport const inMessage = data => {   \n    return async function(dispatch, getState, extra) {\n        dispatch(inMessageSuccess(data));\n        // If user is in chats section\n        if (window.location.pathname.startsWith('/chats')) {\n            if (window.location.pathname === `/chats/${data.chatId}`) {\n                SocketIo.confirmChatRead({\n                    chatId: data.chatId,\n                    user: data.senderLogin\n                });    \n            } else {\n                const chat = getState().chats[0];\n                if (chat._id === data.chatId) {\n                    SocketIo.confirmChatRead({\n                        chatId: data.chatId,\n                        user: data.senderLogin\n                    });        \n                } else {\n                    extra.notifyNewChats(data.senderLogin);\n                }\n            }\n        } else {\n            extra.notifyNewChats(data.senderLogin);\n        }\n    }\n};\n\nconst inMessageSuccess = data => ({ type: ACTIONS.SOCKETIO_IN_MESSAGE, data });\n\nexport const outMessage = data => ({ type: ACTIONS.SOCKETIO_OUT_MESSAGE, data });\nexport const outMessageSent = data => ({ type: ACTIONS.SOCKETIO_OUT_MESSAGE_SENT, data });\nexport const outMessagesConfirmed = data => ({ type: ACTIONS.SOCKETIO_OUT_MESSAGES_CONFIRMED, data });"]},"metadata":{},"sourceType":"module"}