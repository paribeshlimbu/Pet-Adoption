{"ast":null,"code":"// Node modules\nimport { connect } from 'react-redux';\nimport { withSnackbar } from 'notistack';\nimport { withNamespaces } from 'react-i18next'; // Own Components\n\nimport Chats from './Chats'; // Models\n// Own modules\n\nimport { ChatActions, SessionActions, SocketIoActions } from '../../store/GlobalActions';\n/**\n * Inyecta props en mi componente para acceder al state del store\n * @param {Object} state Estado de mi store\n */\n\nconst mapStateToProps = state => {\n  return {\n    socketIo: state.socketIo,\n    session: state.session,\n    chats: state.chats,\n    ui: state.ui\n  };\n};\n/**\n * Inyecta props en mi componente para acceder a los reducers del store\n * @param {Function} dispatch Dispatch del store\n */\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // Session\n    logout: () => dispatch(SessionActions.logout()),\n    // Chats\n    fetchUserChats: () => dispatch(ChatActions.fetchUserChats()),\n    fetchChat: id => dispatch(ChatActions.fetchChat(id)),\n    // Sockect Io\n    connectSocket: login => dispatch(SocketIoActions.connect(login))\n  };\n};\n/**\n * Envuelvo el App en al función connect para conectar con el store recibido del provider\n */\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(withNamespaces()(Chats)));","map":{"version":3,"sources":["C:\\Users\\Administrator\\Downloads\\keepcoding-wallaclone-master\\frontend\\src\\containers\\Chats\\index.js"],"names":["connect","withSnackbar","withNamespaces","Chats","ChatActions","SessionActions","SocketIoActions","mapStateToProps","state","socketIo","session","chats","ui","mapDispatchToProps","dispatch","logout","fetchUserChats","fetchChat","id","connectSocket","login"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;AACA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,eAAtC,QAA6D,2BAA7D;AAEA;;;;;AAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QADb;AAEHC,IAAAA,OAAO,EAAEF,KAAK,CAACE,OAFZ;AAGHC,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAHV;AAIHC,IAAAA,EAAE,EAAEJ,KAAK,CAACI;AAJP,GAAP;AAMH,CAPD;AASA;;;;;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACH;AACAC,IAAAA,MAAM,EAAE,MAAMD,QAAQ,CAACT,cAAc,CAACU,MAAf,EAAD,CAFnB;AAGH;AACAC,IAAAA,cAAc,EAAE,MAAMF,QAAQ,CAACV,WAAW,CAACY,cAAZ,EAAD,CAJ3B;AAKHC,IAAAA,SAAS,EAAEC,EAAE,IAAIJ,QAAQ,CAACV,WAAW,CAACa,SAAZ,CAAsBC,EAAtB,CAAD,CALtB;AAMH;AACAC,IAAAA,aAAa,EAAEC,KAAK,IAAIN,QAAQ,CAACR,eAAe,CAACN,OAAhB,CAAwBoB,KAAxB,CAAD;AAP7B,GAAP;AASH,CAVD;AAYA;;;;;AAGA,eAAepB,OAAO,CAACO,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CZ,YAAY,CAACC,cAAc,GAAGC,KAAH,CAAf,CAAzD,CAAf","sourcesContent":["// Node modules\nimport { connect } from 'react-redux';\nimport { withSnackbar } from 'notistack';\nimport { withNamespaces } from 'react-i18next';\n// Own Components\nimport Chats from './Chats';\n// Models\n// Own modules\nimport { ChatActions, SessionActions, SocketIoActions } from '../../store/GlobalActions';\n\n/**\n * Inyecta props en mi componente para acceder al state del store\n * @param {Object} state Estado de mi store\n */\nconst mapStateToProps = (state) => {\n    return {\n        socketIo: state.socketIo,\n        session: state.session,\n        chats: state.chats,\n        ui: state.ui\n    }\n}\n\n/**\n * Inyecta props en mi componente para acceder a los reducers del store\n * @param {Function} dispatch Dispatch del store\n */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // Session\n        logout: () => dispatch(SessionActions.logout()),\n        // Chats\n        fetchUserChats: () => dispatch(ChatActions.fetchUserChats()),\n        fetchChat: id => dispatch(ChatActions.fetchChat(id)),\n        // Sockect Io\n        connectSocket: login => dispatch(SocketIoActions.connect(login))\n    }\n}\n\n/**\n * Envuelvo el App en al función connect para conectar con el store recibido del provider\n */ \nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(withNamespaces()(Chats)));"]},"metadata":{},"sourceType":"module"}